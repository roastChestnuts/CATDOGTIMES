<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper
	namespace="com.catdog.times.route.model.mapper.RouteMapper">
	<resultMap type="RouteRatingDTO" id="RouteRatingDTOResultMap">
		<result column="routeRatingNo" property="routeRatingNo" />
		<result column="routeNo" property="routeNo" />
		<result column="routeRatingScore" property="routeRatingScore" />
		<result column="memberNo" property="memberNo" />
	</resultMap>

	<resultMap type="UserRatingDTO" id="UserRatingDTOResultMap">
		<result column="userRatingNo" property="userRatingNo" />
		<result column="ratingTargetMemberNo"
			property="ratingTargetMemberNo" />
		<result column="walkRatingScore" property="walkRatingScore" />
		<result column="memberNo" property="memberNo" />
	</resultMap>

	<resultMap type="WalkMyRouteDTO" id="WalkMyRouteResultMap">
		<result column="myRouteNo" property="myRouteNo" />
		<result column="myRouteName" property="myRouteName" />
		<result column="myRouteThumbnail" property="myRouteThumbnail" />
		<result column="myRouteDepartures" property="myRouteDepartures" />
		<result column="myRouteDestination"
			property="myRouteDestination" />
		<result column="myRouteLocations" property="myRouteLocations" />
		<result column="myRouteCreateDate" property="myRouteCreateDate" />
		<result column="memberNo" property="memberNo" />
	</resultMap>

	<resultMap type="WalkParticipantDTO"
		id="WalkParticipantResultMap">
		<result column="walkParticipantNo" property="walkParticipantNo" />
		<result column="partyNo" property="partyNo" />
		<result column="memberNo" property="memberNo" />
	</resultMap>

	<resultMap type="WalkPartyDTO" id="WalkPartyResultMap">
		<result column="partyNo" property="partyNo" />
		<result column="partyName" property="partyName" />
		<result column="partyThumbnail" property="partyThumbnail" />
		<result column="partyCategory" property="partyCategory" />
		<result column="partyDepartures" property="partyDepartures" />
		<result column="partyDestination" property="partyDestination" />
		<result column="memberNo" property="memberNo" />
		<result column="routeNo" property="routeNo" />
	</resultMap>


	<resultMap type="WalkRouteDTO" id="WalkRouteResultMap">
		<result column="routeNo" property="routeNo" />
		<result column="routeName" property="routeName" />
		<result column="routeThumbnail" property="routeThumbnail" />
		<result column="routeDepartures" property="routeDepartures" />
		<result column="routeDestination" property="routeDestination" />
		<result column="routeLocations" property="routeLocations" />
		<result column="routePublic" property="routePublic" />
		<result column="routeCreateDate" property="routeCreateDate" />
		<result column="memberNo" property="memberNo" />
	</resultMap>

	<!-- 탐색페이지 조회문 -->
	<sql id="searchExploreImageSql">
		SELECT B.IMAGE_ID,
		B.IMAGE_SAVED_NAME,
		B.IMAGE_ORIGINAL_NAME,
		B.POST_ID
		FROM POST A
		LEFT JOIN IMAGE B
		ON
		A.POST_ID = B.POST_ID
	</sql>
	<!-- <<<<Create>>> -->
	<!-- 루트 작성 -->
	<insert id="insertWalkRoute" parameterType="WalkRouteDTO"
		useGeneratedKeys="true" keyColumn="ROUTE_NO" keyProperty="routeNo">
		<selectKey keyProperty="routeNo" resultType="int"
			order="AFTER">
			SELECT SEQ_ROUTE_NO.CURRVAL AS routeNo FROM DUAL
		</selectKey>
		INSERT INTO WALK_ROUTE(
		ROUTE_NO,
		ROUTE_NAME,
		ROUTE_THUMBNAIL,
		ROUTE_DEPARTURES,
		ROUTE_DESTINATION,
		ROUTE_LOCATIONS,
		ROUTE_PUBLIC,
		ROUTE_CREATE_DATE,
		MEMBER_NO
		) VALUES(
		SEQ_ROUTE_NO.NEXTVAL,
		#{routeName},
		#{routeThumbnail},
		#{routeDepartures},
		#{routeDestination},
		NULL,
		#{routePublic},
		DEFAULT,
		#{memberNo}

		)
	</insert>

	<!-- 마이루트 작성 -->
	<insert id="insertWalkMyRoute" parameterType="WalkMyRouteDTO"
		useGeneratedKeys="true" keyColumn="MY_ROUTE_NO"
		keyProperty="myRouteNo">
		<selectKey keyProperty="myRouteNo" resultType="int"
			order="AFTER">
			SELECT SEQ_MY_ROUTE_NO.CURRVAL AS myRouteNo FROM DUAL
		</selectKey>
		INSERT INTO WALK_MY_ROUTE(
		MY_ROUTE_NO,
		MY_ROUTE_NAME,
		MY_ROUTE_THUMBNAIL,
		MY_ROUTE_DEPARTURES,
		MY_ROUTE_DESTINATION,
		MY_ROUTE_LOCATIONS,
		ROUTE_CREATE_DATE
		MEMBER_NO,
		) VALUES(
		SEQ_MY_ROUTE_NO.NEXTVAL,
		#{myRouteName},
		#{myRouteThumbnail},
		#{myRouteDepartures},
		#{myRouteDestination},
		#{myRouteLocations},
		DEFAULT,
		#{memberNo}
		)
	</insert>

	<!-- 사용자 평점 작성 -->
	<insert id="inertUserRating" parameterType="UserRatingDTO"
		useGeneratedKeys="true" keyColumn="USER_RATING_NO"
		keyProperty="userRatingNo">
		INSERT INTO USER_RATING
		(
		RATING_USER_NO,
		RATING_TARGET_MEMBER_NO,
		WALK_RATING_SCORE,
		MEMBER_NO
		)
		VALUES
		(
		SEQ_RATING_USER_NO.NEXTVAL,
		#{ratingTargetMemberNo},
		#{walkRatingScore},
		#{memberNo},
		)
	</insert>

	<!-- 루트 평점 작성 -->
	<insert id="inserRouteRating" parameterType="RouteRatingDTO"
		useGeneratedKeys="true" keyColumn="ROUTE_RATING_NO"
		keyProperty="routeRatingNo">
		INSERT INTO ROUTE_RATING
		(
		ROUTE_RATING_NO,
		ROUTE_NO,
		ROUTE_RATING_SCORE,
		MEMBER_NO
		)
		VALUES
		(
		SEQ_ROUTE_RATING_NO.NEXTVAL,
		#{routeNo},
		#{routeRatingScore},
		#{memberNo},
		)
	</insert>

	<!-- 파티 참가자 작성 -->
	<insert id="inserWalkParticipant" parameterType="WalkParticipantDTO"
		useGeneratedKeys="true" keyColumn="ROUTE_RATING_NO"
		keyProperty="routeRatingNo">
		INSERT INTO WALK_PARTICIPANT
		(
		WALK_PARTICIPANT_NO,
		PARTY_NO,
		MEMBER_NO
		)
		VALUES
		(
		SEQ_WALK_PARTICIPANT_NO.NEXTVAL,
		#{partyNo},
		#{memberNo}
		)
	</insert>

	<!-- 파티 작성 -->
	<insert id="insertWalkParty" parameterType="WalkPartyDTO"
		useGeneratedKeys="true" keyColumn="PARTY_NO" keyProperty="partyNo">
		INSERT INTO
		WALK_PARTY
		(
		PARTY_NO,
		PARTY_NAME,
		PARTY_CATEGORY,
		PARTY_DEPARTURES,
		PARTY_DESTINATION,
		PARTY_CREATEDATE,
		PARTY_DEPARTUREDATE,
		MEMBER_NO
		ROUTE_NO
		)
		VALUES
		(
		SEQ_PARTY_NO.NEXTVAL,
		#{partyName},
		#{partyCategory},
		#{partyDepartures},
		#{partyDestination},
		DEFAULT,
		DEFAULT,
		#{memberNo},
		#{routeNo}
		)
	</insert>

	<!-- <<<LIST, READ>>> -->
	<!-- SNS 피드 원하는 값만 조회 -->
	<select id="selectAllPost" resultMap="SNSFeedDTOResultMap">
		SELECT A.POST_ID as feedId,
		--피드 id
		--A.MEMBER_NO -- 게시글 작성자 닉네임 불러올 넘버
		A.POST_CONTENT as
		feedContent, -- 피드 콘텐츠
		D.MEMBER_NICKNAME as writerName, -- 작성자 닉네임
		D.MEMBER_PHOTO as writerPhoto, -- 작성자 프로필
		B.IMAGE_SAVED_NAME as
		feedImage, --피드 이미지
		--C.MEMBER_NO, -- 댓글 사용자 닉네임 불러올 넘버
		E.MEMBER_NICKNAME as likerName,
		E.MEMBER_PHOTO as likerPhoto,
		C.POST_LIKE_COUNT as postLikeCount -- 댓글 좋아요 개수
		FROM POST A
		LEFT JOIN
		IMAGE B
		ON A.POST_ID = B.POST_ID
		LEFT JOIN (SELECT
		POST_ID,
		count(POST_LIKE_ID) as POST_LIKE_COUNT,
		max(MEMBER_NO) as MEMBER_NO
		FROM POST_LIKE
		GROUP BY POST_ID) C
		ON A.POST_ID = C.POST_ID
		LEFT JOIN
		MEMBER D
		ON A.MEMBER_NO = D.MEMBER_NO
		LEFT JOIN MEMBER E
		ON C.MEMBER_NO =
		E.MEMBER_NO
	</select>

	<!-- 게시물 상세조회 -->
	<select id="readPost" resultMap="postResultMap"
		parameterType="int">
		SELECT *
		FROM POST
		WHERE POST_ID = #{postId}
	</select>

	<!-- 특정 게시물 내용으로 조회 -->
	<select id="findByContent" resultMap="postResultMap"
		parameterType="String">
		SELECT *
		FROM POST
		WHERE POST_CONTENT like '%' ||
		#{postContent} || '%'
	</select>

	<!-- 검색 -->
	<select id="searchUser" parameterType="String"
		resultMap="searchMemberResultMap">
		SELECT MEMBER_NO,
		MEMBER_ID,
		MEMBER_NAME,
		MEMBER_NICKNAME
		FROM
		MEMBER
		WHERE MEMBER_ID LIKE '%'||#{id}||'%'
		AND MEMBER_IS = 'Y'
		ORDER BY
		MEMBER_ID
	</select>

	<!-- 특정 유저 탐색페이지 조회 -->
	<select id="searchExploreImage" parameterType="int"
		resultMap="exploreResultMap">
		<include refid="searchExploreImageSql" />
		WHERE 1=1
		AND A.POST_SHOWYN = 'Y'
		AND A.MEMBER_NO = #{memberNo}
		ORDER BY
		A.POST_CREATE_DATE DESC
	</select>
	<!-- 랜덤 탐색페이지 조회 -->
	<select id="searchRandomExploreImage"
		resultMap="exploreResultMap">
		<include refid="searchExploreImageSql" />
		WHERE 1=1
		AND A.POST_SHOWYN = 'Y'
		ORDER BY DBMS_RANDOM.VALUE
	</select>
	<!-- 알림창 조회(좋아요 누른 사람들) -->
	<select id="searchNotifications" parameterType="String"
		resultMap="notificationResultMap">
		SELECT B.MEMBER_NO,
		A.POST_ID,
		C.MEMBER_ID,
		C.MEMBER_NAME,
		C.MEMBER_NICKNAME,
		C.MEMBER_PHOTO
		FROM POST A
		LEFT JOIN POST_LIKE B
		ON
		A.POST_ID = B.POST_ID
		LEFT JOIN MEMBER C
		ON B.MEMBER_NO = C.MEMBER_NO
		WHERE 1=1
		AND TO_CHAR(B.POST_LIKE_CREATED_DATE, 'YYYYMMDD') =
		TO_CHAR(SYSDATE,
		'YYYYMMDD')
		AND B.POST_ID IS NOT NULL
		ORDER BY
		B.POST_LIKE_CREATED_DATE DESC
	</select>

	<!-- 알림창 조회(추천인들) -->
	<select id="searchRecommends" parameterType="String"
		resultMap="RecommendResultMap">
		SELECT A.MEMBER_NO,
		A.MEMBER_ID,
		A.MEMBER_NAME,
		A.MEMBER_NICKNAME,
		A.MEMBER_PHOTO
		FROM MEMBER A
		LEFT JOIN FOLLOW B
		ON A.MEMBER_NO =
		B.FOLLOWER_ID
		WHERE 1=1
		AND A.MEMBER_IS = 'Y'
		AND B.FOLLOW_ID IS NULL
		AND <![CDATA[ROWNUM <= 5]]> <!-- AND ROWNUM <= 5 -->
		ORDER BY DBMS_RANDOM.VALUE
	</select>


	<!-- 팔로우 취소 -->
	<delete id="deleteFollow" parameterType="FollowDTO">
		DELETE FROM FOLLOW
		WHERE
		FOLLOW_ID = #{followId}
	</delete>

	<!-- 게시글 삭제 -->
	<delete id="deletePost" parameterType="int">
		DELETE FROM POST
		WHERE
		POST_ID = #{postId}
	</delete>
</mapper>