<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.catdog.times.post.model.mapper.PostMapper">
	<resultMap type="SNSFeedDTO" id="SNSFeedDTOResultMap">
		<result column="feedId" property="feedId" />
		<result column="feedContent" property="feedContent" />
		<result column="writerName" property="writerName" />
		<result column="writerPhoto" property="writerPhoto" />
		<result column="feedImage" property="feedImage" />
		<result column="likerName" property="likerName" />
		<result column="likerPhoto" property="likerPhoto" />
		<result column="postLikeCount" property="postLikeCount" />
	</resultMap>

	<resultMap type="PostDTO" id="postResultMap">
		<result column="POST_ID" property="postId" />
		<result column="POST_CONTENT" property="postContent" />
		<result column="POST_CREATE_DATE" property="postCreateDate" />
		<result column="POST_UPDATE_DATE" property="postUpdateDate" />
		<result column="MEMBER_NO" property="memberNo" />
		<result column="POST_HASHTAG" property="postHashtag" />
	</resultMap>

	<resultMap type="PostLikeDTO" id="postLikeResultMap">
		<result column="POST_LIKE_ID" property="postLikeId" />
		<result column="POST_ID" property="postId" />
		<result column="MEMBER_NO" property="memberNo" />
		<result column="POST_LIKE_CREATED_DATE"
			property="postLikeCreatedDate" />
	</resultMap>

	<resultMap type="PostHashtagDTO" id="postHashtagResultMap">
		<result column="POST_HASHTAG_ID" property="postHashtagId" />
		<result column="POST_ID" property="postId" />
		<result column="POST_HASHTAG" property="postHashtag" />
	</resultMap>

	<resultMap type="ImageDTO" id="ImageResultMap">
		<result column="IMAGE_ID" property="imageId" />
		<result column="IMAGE_SAVED_NAME" property="imageSavedName" />
		<result column="IMAGE_ORIGINAL_NAME"
			property="imageOriginalName" />
		<result column="POST_ID" property="postId" />
	</resultMap>

	<resultMap type="ReplyDTO" id="ReplyResultMap">
		<result column="REPLY_ID" property="replyId" />
		<result column="REPLY_CONTENT" property="replyContent" />
		<result column="REPLY_CREATED_DATE" property="replyCreatedDate" />
		<result column="REPLY_UPDATE_DATE" property="replyUpdateDate" />
		<result column="POST_ID" property="postId" />
		<result column="MEMBER_NO" property="memberNo" />
	</resultMap>

	<resultMap type="ReadReplyDTO" id="ReadReplyResultMap">
		<result column="replyId" property="replyId" />
		<result column="replyContent" property="replyContent" />
		<result column="REPLY_CREATED_DATE" property="replyCreatedDate" />
		<result column="REPLY_UPDATE_DATE" property="replyUpdateDate" />
		<result column="postId" property="postId" />
		<result column="MEMBER_NO" property="memberNo" />
		<result column="replyNickname" property="replyNickname" />
		<result column="writerPhoto" property="writerPhoto" />
	</resultMap>

	<resultMap type="ReplyLikeDTO" id="ReplyLikeResultMap">
		<result column="REPLY_LIKE_ID" property="replyLikeId" />
		<result column="REPLY_ID" property="replyId" />
		<result column="MEMBER_NO" property="memberNo" />
		<result column="REPLY_LIKE_CREATED_DATE"
			property="replyLikeCreatedDate" />
	</resultMap>

	<resultMap type="BookmarkDTO" id="BookmarkResultMap">
		<result column="BOOKMARK_ID" property="bookmarkId" />
		<result column="MEMBER_NO" property="memberNo" />
		<result column="POST_ID" property="postId" />
		<result column="BOOKMARK_CREATED_DATE"
			property="bookmarkCreatedDate" />
	</resultMap>

	<resultMap type="SearchMemberDTO" id="searchMemberResultMap">
		<id property="no" column="MEMBER_NO" />
		<result property="id" column="MEMBER_ID"/>
		<result property="name" column="MEMBER_NAME"/>
		<result property="nickName" column="MEMBER_NICKNAME"/>
		<result property="photo" column="MEMBER_PHOTO"/>				
	</resultMap>
	
	<resultMap type="ImageDTO" id="exploreResultMap">
		<id property="imageId" column="IMAGE_ID" />
		<result property="imageSavedName" column="IMAGE_SAVED_NAME"/>
		<result property="imageOriginalName" column="IMAGE_ORIGINAL_NAME"/>
		<result property="postId" column="POST_ID"/>			
	</resultMap>
	<resultMap type="NotificationDTO" id="notificationResultMap">
		<id property="memberNo" column="MEMBER_NO" />
		<result property="postId" column="POST_ID"/>
		<result property="memberName" column="MEMBER_NAME"/>
		<result property="memberId" column="MEMBER_ID"/>
		<result property="memberNickName" column="MEMBER_NICKNAME"/>
		<result property="memberPhoto" column="MEMBER_PHOTO"/>
	</resultMap>
	<resultMap type="RecommendDTO" id="RecommendResultMap">
		<id property="memberNo" column="MEMBER_NO" />
		<result property="memberName" column="MEMBER_NAME"/>
		<result property="memberId" column="MEMBER_ID"/>
		<result property="memberNickName" column="MEMBER_NICKNAME"/>
		<result property="memberPhoto" column="MEMBER_PHOTO"/>		
	</resultMap>
	
	<!-- 탐색페이지 조회문 -->
	<sql id="searchExploreImageSql">
		SELECT B.IMAGE_ID,
		       B.IMAGE_SAVED_NAME,
		       B.IMAGE_ORIGINAL_NAME,
		       B.POST_ID
		  FROM POST A
     LEFT JOIN IMAGE B
            ON A.POST_ID = B.POST_ID
	</sql>
	<!-- <<<<Create>>> -->
	<!-- 게시글 작성 (SNS 게시글 + 이미지 + 해시태그) -->
	<!-- SNS 게시글 작성 -->
	<insert id="insertPost" parameterType="PostDTO"
		useGeneratedKeys="true" keyColumn="POST_ID" keyProperty="postId">
		INSERT INTO
		POST(
		POST_ID,
		POST_CONTENT,
		POST_CREATE_DATE,
		POST_UPDATE_DATE,
		MEMBER_NO
		) VALUES(
		SEQ_POST_ID.NEXTVAL,
		#{postContent},
		DEFAULT,
		DEFAULT,
		#{memberNo}
		)
	</insert>

	<!-- 이미지 삽입 -->
	<insert id="insertImage" parameterType="ImageDTO"
		useGeneratedKeys="true" keyColumn="IMAGE_ID" keyProperty="imageId">
		INSERT INTO 
			IMAGE (
			IMAGE_ID,
			IMAGE_SAVED_NAME,
			IMAGE_ORIGINAL_NAME,
			POST_ID
		) VALUES(
		SEQ_IMAGE_ID.NEXTVAL,
		#{imageSavedName},
		#{imageOriginalName},
		SEQ_POST_ID.CURRVAL
		)
	</insert>

	<!-- SNS 게시글 해시태그 작성 -->
	<insert id="insertHashtag" parameterType="PostHashtagDTO"
		useGeneratedKeys="true" keyColumn="POST_HASHTAG_ID"
		keyProperty="postHashtagId">
		INSERT ALL
		<foreach separator=" " item="file" collection="list">
			INTO
			POST_HASHTAG (POST_HASHTAG_ID,POST_ID,POST_HASHTAG)
			VALUES(
			SEQ_POST_HASHTAG_ID.NEXTVAL,
			SEQ_POST_ID.CURRVAL,
			#{file.postHashtag})
		</foreach>
		SELECT * FROM DUAL
	</insert>
	
<!-- 	<insert id="insertHashtag" parameterType="PostHashtagDTO" useGeneratedKeys="true" keyColumn="POST_HASHTAG_ID"
		keyProperty="postHashtagId">		
		INSERT 		
			INTO
			POST_HASHTAG (POST_HASHTAG_ID,POST_ID,POST_HASHTAG)
			VALUES(
			SEQ_POST_HASHTAG_ID.NEXTVAL,
			(SELECT LAST_NUMBER FROM USER_SEQUENCES WHERE SEQUENCE_NAME = 'SEQ_POST_ID'),
			#{postHashtag})
	</insert> -->

	<!-- 좋아요 누르면 -->
	<insert id="insertPostLike" parameterType="PostLikeDTO"
		useGeneratedKeys="true" keyColumn="POST_LIKE_ID"
		keyProperty="postLikeId">
		INSERT
		INTO
		POST_LIKE (
		POST_LIKE_ID,
		POST_ID,
		MEMBER_NO,
		POST_LIKE_CREATED_DATE
		)
		VALUES(
		SEQ_POST_LIKE_ID.NEXTVAL,
		#{postId},
		#{memberNo},
		DEFAULT
		)
	</insert>

	<!-- 댓글 작성 -->
	<insert id="insertReply" parameterType="ReplyDTO"
		useGeneratedKeys="true" keyColumn="REPLY_ID" keyProperty="replyId">
		INSERT
		INTO
		REPLY (
		REPLY_ID,
		REPLY_CONTENT,
		REPLY_CREATED_DATE,
		REPLY_UPDATE_DATE,
		POST_ID,
		MEMBER_NO
		)
		VALUES(
		SEQ_REPLY_ID.NEXTVAL,
		#{replyContent},
		DEFAULT,
		DEFAULT,
		#{postId},
		#{memberNo}
		)
	</insert>

	<!-- 댓글 좋아요 -->
	<insert id="insertReplyLike" parameterType="ReplyLikeDTO"
		useGeneratedKeys="true" keyColumn="REPLY_LIKE_ID"
		keyProperty="replyLikeId">
		INSERT
		INTO
		REPLY_LIKE (
		REPLY_LIKE_ID,
		REPLY_ID,
		MEMBER_NO,
		REPLY_LIKE_CREATED_DATE
		)
		VALUES(
		SEQ_REPLY_LIKE_ID.NEXTVAL,
		#{replyId},
		#{memberNo},
		DEFAULT
		)
	</insert>

	<!-- 북마크 -->
	<insert id="insertBookmark" parameterType="BookmarkDTO"
		useGeneratedKeys="true" keyColumn="BOOKMARK_ID"
		keyProperty="bookmarkId">
		INSERT
		INTO
		BOOKMARK (
		BOOKMARK_ID,
		MEMBER_NO,
		POST_ID,
		BOOKMARK_CREATED_DATE
		)
		VALUES(
		SEQ_BOOKMARK_ID.NEXTVAL,
		#{memberNo},
		#{postId},
		DEFAULT
		)
	</insert>

	<!-- <<<LIST, READ>>> -->
	<!-- SNS 피드 원하는 값만 조회 -->
	<select id="selectAllPost" resultMap="SNSFeedDTOResultMap">
		SELECT A.POST_ID as feedId,
		--피드 id
		--A.MEMBER_NO -- 게시글 작성자 닉네임 불러올 넘버
		A.POST_CONTENT as
		feedContent, -- 피드 콘텐츠
		D.MEMBER_NICKNAME as writerName, -- 작성자 닉네임
		D.MEMBER_PHOTO as writerPhoto, -- 작성자 프로필
		B.IMAGE_SAVED_NAME as feedImage, --피드 이미지
		--C.MEMBER_NO, -- 댓글 사용자 닉네임 불러올 넘버
		E.MEMBER_NICKNAME as likerName,
		E.MEMBER_PHOTO as likerPhoto,
		C.POST_LIKE_COUNT as postLikeCount -- 댓글 좋아요 개수
		FROM POST A
		LEFT JOIN
		IMAGE B
		ON A.POST_ID = B.POST_ID
		LEFT JOIN (SELECT
		POST_ID,
		count(POST_LIKE_ID) as POST_LIKE_COUNT,
		max(MEMBER_NO) as MEMBER_NO
		FROM POST_LIKE
		GROUP BY POST_ID) C
		ON A.POST_ID = C.POST_ID
		LEFT JOIN
		MEMBER D
		ON A.MEMBER_NO = D.MEMBER_NO
		LEFT JOIN MEMBER E
		ON C.MEMBER_NO = E.MEMBER_NO
	</select>

	<!-- 특정 게시물 닉네임으로 조회 -->
	<!-- <select id="findByNickname" resultMap="postResultMap" parameterType="String"> 
		SELECT p.POST_ID, p.POST_CONTENT, p.POST_CREATE_DATE, p.POST_UPDATE_DATE, 
		m.MEMBER_NICKNAME FROM POST p, MEMBER m WHERE p.MEMBER_NO = m.MEMBER_NO AND 
		m.MEMBER_NICKNAME like '%' || #{nickName} || '%' </select> -->
	<!-- 게시물 상세조회 -->
	<select id="readPost" resultMap="postResultMap"
		parameterType="int">
		SELECT *
		FROM POST
		WHERE POST_ID = #{postId}
	</select>

	<!-- 특정 게시물 내용으로 조회 -->
	<select id="findByContent" resultMap="postResultMap"
		parameterType="String">
		SELECT *
		FROM POST
		WHERE POST_CONTENT like '%' ||
		#{postContent} || '%'
	</select>
	<!-- 게시물 해시태그로 조회 -->
	<select id="findByHashtag" resultMap="postResultMap"
		parameterType="String">
		SELECT p.*
		FROM POST p, POST_HASHTAG h
		WHERE p.POST_ID =
		h.POST_ID
		AND POST_HASHTAG like '%' || #{postHashtag} || '%'
	</select>

	<!-- 탐색(이미지 검색 id값을 랜덤하게 넣자[이미지 숫자 counting도 해야되나...]) -->
	<select id="findImageById" resultMap="ImageResultMap"
		parameterType="int">
		SELECT i.*
		FROM IMAGE i, POST p
		WHERE i.POST_ID =
		p.POST_ID
		AND i.IMAGE_ID like '%' || #{imageId} || '%'
	</select>
	<!-- 알림 고민 중... -->

	<!-- 댓글 읽어오기 -->
	<select id="readReply" resultMap="ReadReplyResultMap"
		parameterType="int">
		SELECT
		R.REPLY_ID AS replyId, -- KEY값으로 쓸 REPLY_ID
		R.REPLY_CONTENT AS replyContent, -- REPLY 내용
		--R.REPLY_CREATED_DATE , --REPLY 생성일
		--R.REPLY_UPDATE_DATE , --REPLY 수정일
		--R.POST_ID, --REPLY 가져올 때 쓸 ID
		M.MEMBER_NICKNAME AS replyNickname,--REPLY 작성한 사람의 닉네임
		M.MEMBER_PHOTO AS writerPhoto-- REPLY 작성한 사람의 프로필 사진
		FROM REPLY R, MEMBER M, POST P
		WHERE R.MEMBER_NO = M.MEMBER_NO
		AND R.POST_ID = P.POST_ID
		AND R.POST_ID = #{postId}
	</select>

	<!-- 검색 -->
	<select id="searchUser" parameterType="String" resultMap="searchMemberResultMap">
		SELECT MEMBER_NO,
		       MEMBER_ID,
		       MEMBER_NAME,
		       MEMBER_NICKNAME
		  FROM MEMBER
		 WHERE MEMBER_ID LIKE '%'||#{id}||'%' 
		   AND MEMBER_IS = 'Y'
      ORDER BY MEMBER_ID
	</select>
	
	<!-- 특정 유저 탐색페이지 조회 -->
	<select id="searchExploreImage" parameterType="int" resultMap="exploreResultMap">
		<include refid="searchExploreImageSql"/>
		 WHERE 1=1 
		   AND A.POST_SHOWYN = 'Y'
		   AND A.MEMBER_NO = #{memberNo}
      ORDER BY A.POST_CREATE_DATE DESC
	</select>
	<!-- 랜덤 탐색페이지 조회 -->
	<select id="searchRandomExploreImage" resultMap="exploreResultMap">
		<include refid="searchExploreImageSql"/>
		 WHERE 1=1 
		   AND A.POST_SHOWYN = 'Y'
      ORDER BY DBMS_RANDOM.VALUE
	</select>
	<!-- 알림창 조회(좋아요 누른 사람들) -->
	<select id="searchNotifications" parameterType="String" resultMap="notificationResultMap">
		SELECT B.MEMBER_NO,
		       A.POST_ID,
         	   C.MEMBER_ID,
               C.MEMBER_NAME,
               C.MEMBER_NICKNAME,
               C.MEMBER_PHOTO
          FROM POST A
     LEFT JOIN POST_LIKE B
            ON A.POST_ID = B.POST_ID
     LEFT JOIN MEMBER C
            ON B.MEMBER_NO = C.MEMBER_NO            
         WHERE 1=1
           AND TO_CHAR(B.POST_LIKE_CREATED_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE, 'YYYYMMDD')
           AND B.POST_ID IS NOT NULL 
      ORDER BY B.POST_LIKE_CREATED_DATE DESC
	</select>
	<!-- 알림창 조회(추천인들) -->
	<select id="searchRecommends" parameterType="String" resultMap="RecommendResultMap">
		SELECT MEMBER_NO,
         	   MEMBER_ID,
               MEMBER_NAME,
               MEMBER_NICKNAME,
               MEMBER_PHOTO
		  FROM MEMBER
		 WHERE 1=1
		   AND MEMBER_IS = 'Y'
		   AND <![CDATA[ROWNUM <= 5]]> <!-- AND ROWNUM <= 5 -->
      ORDER BY DBMS_RANDOM.VALUE
	</select>
	<!-- <<<UPDATE>>> -->
	<!-- 이거 <update>로 해줘야할 것 같은데... -->
	<!-- SNS 게시물 본문 수정, //조건절에 memberno 넣어야 하나?// -->
	<update id="postUpdate" parameterType="map">
		UPDATE POST
		SET
		POST_CONTENT = #{postContent}
		WHERE POST_ID = #{postId}
		AND MEMBER_NO =
		#{memberNo}
	</update>
	<!-- SNS 해시태그 수정 -->
	<update id="hashtagUpdate" parameterType="map">
		UPDATE POST_HASHTAG
		SET
		POST_HASHTAG = #{postHashtag}
		WHERE POST_HASHTAG_ID = #{postHashtagId}
		AND POST_ID = #{postId}
	</update>
	<!-- SNS 댓글 수정 -->
	<update id="replyUpdate" parameterType="map">
		UPDATE REPLY
		SET
		REPLY_CONTENT = #{replyContent}
		WHERE REPLY_ID = #{postId}
		AND POST_ID =
		#{postId}
		AND MEMBER_NO = #{memberNo}
	</update>

	<!-- <<<DELETE>>> -->
	<!-- 우선 자식테이블부터 차근차근 올라가보자 -->
	<!-- 북마크 삭제 -->
	<delete id="deleteBookmark" parameterType="int">
		DELETE FROM BOOKMARK
		WHERE
		BOOKMARK_ID = #{bookmarkId}
	</delete>
	<!-- 댓글 좋아요 삭제 -->
	<delete id="deleteReplyLike" parameterType="int">
		DELETE FROM
		REPLY_LIKE
		WHERE
		REPLY_LIKE_ID = #{replyLikeId}
	</delete>
	<!-- 게시글 좋아요 삭제 -->
	<delete id="deletePostLike" parameterType="int">
		DELETE FROM POST_LIKE
		WHERE POST_LIKE_ID = #{postLikeId}
	</delete>
	<!-- 게시글 해시태그 삭제 -->
	<delete id="deletePostHashtag" parameterType="int">
		DELETE FROM
		POST_HASHTAG
		WHERE
		POST_HASHTAG_ID = #{postHashtagId}
	</delete>
	<!-- 댓글 삭제 -->
	<delete id="deleteReply" parameterType="int">
		DELETE FROM REPLY
		WHERE
		REPLY_ID = #{replyId}
	</delete>
	<!-- 이미지 삭제 -->
	<delete id="deleteImage" parameterType="int">
		DELETE FROM IMAGE
		WHERE
		IMAGE_ID = #{imageId}
	</delete>
	<!-- 게시글 삭제 -->
	<delete id="deletePost" parameterType="int">
		DELETE FROM POST
		WHERE
		POST_ID = #{postId}
	</delete>
</mapper>